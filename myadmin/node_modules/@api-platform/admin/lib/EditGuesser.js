"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IntrospectedEditGuesser = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactAdmin = require("react-admin");

var _InputGuesser = _interopRequireDefault(require("./InputGuesser"));

var _Introspecter = _interopRequireDefault(require("./Introspecter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const displayOverrideCode = (schema, fields) => {
  if (process.env.NODE_ENV === 'production') return;
  let code = 'If you want to override at least one input, paste this content in the <EditGuesser> component of your resource:\n\n';
  code += `const ${schema.title}Edit = props => (\n`;
  code += `    <EditGuesser {...props}>\n`;
  fields.forEach(field => {
    code += `        <InputGuesser source={"${field.name}"} />\n`;
  });
  code += `    </EditGuesser>\n`;
  code += `);\n`;
  code += `\n`;
  code += `And don't forget update your <ResourceGuesser> component:\n`;
  code += `<ResourceGuesser name={"${schema.name}"} edit={${schema.title}Edit} />`;
  console.info(code);
};

const IntrospectedEditGuesser = ({
  fields,
  readableFields,
  writableFields,
  schema,
  schemaAnalyzer,
  resource,
  id,
  basePath,
  // @deprecated use mutationMode: undoable instead
  undoable = false,
  mutationMode = undoable ? 'undoable' : 'pessimistic',
  onSuccess,
  successMessage,
  onFailure,
  redirect: redirectTo = 'list',
  initialValues,
  validate,
  toolbar,
  margin,
  variant,
  submitOnEnter,
  warnWhenUnsavedChanges,
  sanitizeEmptyValues,
  simpleFormComponent,
  children,
  ...props
}) => {
  const [mutate] = (0, _reactAdmin.useMutation)();
  const notify = (0, _reactAdmin.useNotify)();
  const redirect = (0, _reactAdmin.useRedirect)();
  let inputChildren = children;

  if (!inputChildren) {
    inputChildren = writableFields.map(field => /*#__PURE__*/_react.default.createElement(_InputGuesser.default, {
      key: field.name,
      source: field.name
    }));
    displayOverrideCode(schema, writableFields);
  }

  if (!Array.isArray(inputChildren)) {
    inputChildren = [inputChildren];
  }

  const hasFileField = inputChildren.some(child => child.type === _reactAdmin.FileInput);
  const save = (0, _react.useCallback)(async values => {
    try {
      const response = await mutate({
        type: 'update',
        resource: resource,
        payload: {
          id,
          data: { ...values,
            extraInformation: {
              hasFileField
            }
          }
        }
      }, {
        returnPromise: true
      });
      const success = onSuccess ? onSuccess : ({
        data
      }) => {
        notify(successMessage || 'ra.notification.updated', 'info', {
          smart_count: 1
        });
        redirect(redirectTo, basePath, data.id, data);
      };
      success(response);
    } catch (error) {
      const submissionErrors = schemaAnalyzer.getSubmissionErrors(error);
      const failure = onFailure ? onFailure : error => {
        let message = 'ra.notification.http_error';

        if (!submissionErrors) {
          message = typeof error === 'string' ? error : error.message || message;
        }

        notify(message, 'warning', {
          _: typeof error === 'string' ? error : error && error.message ? error.message : undefined
        });
      };
      failure(error);

      if (submissionErrors) {
        return submissionErrors;
      }

      return {};
    }
  }, [mutate, hasFileField, resource, id, onSuccess, successMessage, onFailure, notify, redirect, redirectTo, basePath, schemaAnalyzer]);
  return /*#__PURE__*/_react.default.createElement(_reactAdmin.Edit, _extends({
    resource: resource,
    id: id,
    basePath: basePath,
    mutationMode: mutationMode,
    transform: data => ({ ...data,
      extraInformation: {
        hasFileField
      }
    })
  }, props), /*#__PURE__*/_react.default.createElement(_reactAdmin.SimpleForm, {
    save: mutationMode !== 'pessimistic' ? undefined : save,
    initialValues: initialValues,
    validate: validate,
    redirect: redirectTo,
    toolbar: toolbar,
    margin: margin,
    variant: variant,
    submitOnEnter: submitOnEnter,
    warnWhenUnsavedChanges: warnWhenUnsavedChanges,
    sanitizeEmptyValues: sanitizeEmptyValues,
    component: simpleFormComponent
  }, inputChildren));
};

exports.IntrospectedEditGuesser = IntrospectedEditGuesser;

const EditGuesser = props => /*#__PURE__*/_react.default.createElement(_Introspecter.default, _extends({
  component: IntrospectedEditGuesser
}, props));

EditGuesser.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  resource: _propTypes.default.string.isRequired
};
var _default = EditGuesser;
exports.default = _default;