{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.resolveSchemaParameters = void 0;\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {Promise<Parameter[]>} The filter parameters\n */\n\nconst resolveSchemaParameters = schema => !schema.parameters.length ? schema.getParameters() : Promise.resolve(schema.parameters);\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {string} The name of the reference field\n */\n\n\nexports.resolveSchemaParameters = resolveSchemaParameters;\n\nconst getFieldNameFromSchema = schema => {\n  const field = schema.fields.find(field => 'http://schema.org/name' === field.id);\n  return field ? field.name : 'id';\n};\n\nconst ORDER_MARKER = 'order[';\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {Promise<Parameter[]>} The order filter parameters\n */\n\nconst getOrderParametersFromSchema = schema => {\n  const authorizedFields = schema.fields.map(field => field.name);\n  return resolveSchemaParameters(schema).then(parameters => parameters.map(filter => filter.variable).filter(filter => filter.includes(ORDER_MARKER)).map(orderFilter => orderFilter.replace(ORDER_MARKER, '').replace(']', '')).filter(filter => authorizedFields.includes(filter.split('.')[0] // split to manage nested properties\n  )));\n};\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {Promise<Parameter[]>} The filter parameters without the order ones\n */\n\n\nconst getFiltersParametersFromSchema = schema => {\n  const authorizedFields = schema.fields.map(field => field.name);\n  return resolveSchemaParameters(schema).then(parameters => parameters.map(filter => ({\n    name: filter.variable,\n    isRequired: filter.required\n  })).filter(filter => !filter.name.includes(ORDER_MARKER)).filter(filter => authorizedFields.includes(filter.name)));\n};\n/**\n * @param {Field} field\n *\n * @returns {string} The type of the field\n */\n\n\nconst getFieldType = field => {\n  switch (field.id) {\n    case 'http://schema.org/identifier':\n      return 'id';\n\n    case 'http://schema.org/email':\n      return 'email';\n\n    case 'http://schema.org/url':\n      return 'url';\n\n    default:\n  }\n\n  if (null !== field.embedded && 1 !== field.maxCardinality) {\n    return 'array';\n  }\n\n  switch (field.range) {\n    case 'http://www.w3.org/2001/XMLSchema#array':\n      return 'array';\n\n    case 'http://www.w3.org/2001/XMLSchema#integer':\n      return 'integer';\n\n    case 'http://www.w3.org/2001/XMLSchema#decimal':\n    case 'http://www.w3.org/2001/XMLSchema#float':\n      return 'float';\n\n    case 'http://www.w3.org/2001/XMLSchema#boolean':\n      return 'boolean';\n\n    case 'http://www.w3.org/2001/XMLSchema#date':\n      return 'date';\n\n    case 'http://www.w3.org/2001/XMLSchema#dateTime':\n      return 'dateTime';\n\n    default:\n      return 'text';\n  }\n};\n/**\n * @param {HttpError} error\n *\n * @returns {?Object<string, string>}\n */\n\n\nconst getSubmissionErrors = error => {\n  if (!error.body || !error.body[0]) {\n    return null;\n  }\n\n  const content = error.body[0];\n  const violationKey = Object.keys(content).find(key => key.includes('violations'));\n\n  if (!violationKey) {\n    return null;\n  }\n\n  const base = violationKey.substring(0, violationKey.indexOf('#'));\n  const violations = content[violationKey].reduce((violations, violation) => !violation[`${base}#propertyPath`] || !violation[`${base}#message`] ? violations : { ...violations,\n    [violation[`${base}#propertyPath`][0]['@value']]: violation[`${base}#message`][0]['@value']\n  }, {});\n\n  if (Object.keys(violations).length === 0) {\n    return null;\n  }\n\n  return violations;\n};\n\nvar _default = () => {\n  return {\n    getFieldNameFromSchema,\n    getOrderParametersFromSchema,\n    getFiltersParametersFromSchema,\n    getFieldType,\n    getSubmissionErrors\n  };\n};\n\nexports.default = _default;","map":{"version":3,"sources":["C:/newproject/bookshop-api/myadmin/node_modules/@api-platform/admin/lib/hydra/schemaAnalyzer.js"],"names":["Object","defineProperty","exports","value","default","resolveSchemaParameters","schema","parameters","length","getParameters","Promise","resolve","getFieldNameFromSchema","field","fields","find","id","name","ORDER_MARKER","getOrderParametersFromSchema","authorizedFields","map","then","filter","variable","includes","orderFilter","replace","split","getFiltersParametersFromSchema","isRequired","required","getFieldType","embedded","maxCardinality","range","getSubmissionErrors","error","body","content","violationKey","keys","key","base","substring","indexOf","violations","reduce","violation","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.resolveSchemaParameters = void 0;\n\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {Promise<Parameter[]>} The filter parameters\n */\nconst resolveSchemaParameters = schema => !schema.parameters.length ? schema.getParameters() : Promise.resolve(schema.parameters);\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {string} The name of the reference field\n */\n\n\nexports.resolveSchemaParameters = resolveSchemaParameters;\n\nconst getFieldNameFromSchema = schema => {\n  const field = schema.fields.find(field => 'http://schema.org/name' === field.id);\n  return field ? field.name : 'id';\n};\n\nconst ORDER_MARKER = 'order[';\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {Promise<Parameter[]>} The order filter parameters\n */\n\nconst getOrderParametersFromSchema = schema => {\n  const authorizedFields = schema.fields.map(field => field.name);\n  return resolveSchemaParameters(schema).then(parameters => parameters.map(filter => filter.variable).filter(filter => filter.includes(ORDER_MARKER)).map(orderFilter => orderFilter.replace(ORDER_MARKER, '').replace(']', '')).filter(filter => authorizedFields.includes(filter.split('.')[0] // split to manage nested properties\n  )));\n};\n/**\n * @param {Resource} schema The schema of a resource\n *\n * @returns {Promise<Parameter[]>} The filter parameters without the order ones\n */\n\n\nconst getFiltersParametersFromSchema = schema => {\n  const authorizedFields = schema.fields.map(field => field.name);\n  return resolveSchemaParameters(schema).then(parameters => parameters.map(filter => ({\n    name: filter.variable,\n    isRequired: filter.required\n  })).filter(filter => !filter.name.includes(ORDER_MARKER)).filter(filter => authorizedFields.includes(filter.name)));\n};\n/**\n * @param {Field} field\n *\n * @returns {string} The type of the field\n */\n\n\nconst getFieldType = field => {\n  switch (field.id) {\n    case 'http://schema.org/identifier':\n      return 'id';\n\n    case 'http://schema.org/email':\n      return 'email';\n\n    case 'http://schema.org/url':\n      return 'url';\n\n    default:\n  }\n\n  if (null !== field.embedded && 1 !== field.maxCardinality) {\n    return 'array';\n  }\n\n  switch (field.range) {\n    case 'http://www.w3.org/2001/XMLSchema#array':\n      return 'array';\n\n    case 'http://www.w3.org/2001/XMLSchema#integer':\n      return 'integer';\n\n    case 'http://www.w3.org/2001/XMLSchema#decimal':\n    case 'http://www.w3.org/2001/XMLSchema#float':\n      return 'float';\n\n    case 'http://www.w3.org/2001/XMLSchema#boolean':\n      return 'boolean';\n\n    case 'http://www.w3.org/2001/XMLSchema#date':\n      return 'date';\n\n    case 'http://www.w3.org/2001/XMLSchema#dateTime':\n      return 'dateTime';\n\n    default:\n      return 'text';\n  }\n};\n/**\n * @param {HttpError} error\n *\n * @returns {?Object<string, string>}\n */\n\n\nconst getSubmissionErrors = error => {\n  if (!error.body || !error.body[0]) {\n    return null;\n  }\n\n  const content = error.body[0];\n  const violationKey = Object.keys(content).find(key => key.includes('violations'));\n\n  if (!violationKey) {\n    return null;\n  }\n\n  const base = violationKey.substring(0, violationKey.indexOf('#'));\n  const violations = content[violationKey].reduce((violations, violation) => !violation[`${base}#propertyPath`] || !violation[`${base}#message`] ? violations : { ...violations,\n    [violation[`${base}#propertyPath`][0]['@value']]: violation[`${base}#message`][0]['@value']\n  }, {});\n\n  if (Object.keys(violations).length === 0) {\n    return null;\n  }\n\n  return violations;\n};\n\nvar _default = () => {\n  return {\n    getFieldNameFromSchema,\n    getOrderParametersFromSchema,\n    getFiltersParametersFromSchema,\n    getFieldType,\n    getSubmissionErrors\n  };\n};\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}