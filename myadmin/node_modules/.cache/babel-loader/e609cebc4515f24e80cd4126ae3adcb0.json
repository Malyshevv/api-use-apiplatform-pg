{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.IntrospectedShowGuesser = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactAdmin = require(\"react-admin\");\n\nvar _FieldGuesser = _interopRequireDefault(require(\"./FieldGuesser\"));\n\nvar _Introspecter = _interopRequireDefault(require(\"./Introspecter\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nconst displayOverrideCode = (schema, fields) => {\n  if (process.env.NODE_ENV === 'production') return;\n  let code = 'If you want to override at least one field, paste this content in the <ShowGuesser> component of your resource:\\n\\n';\n  code += `const ${schema.title}Show = props => (\\n`;\n  code += `    <ShowGuesser {...props}>\\n`;\n  fields.forEach(field => {\n    code += `        <FieldGuesser source={\"${field.name}\"} addLabel={true} />\\n`;\n  });\n  code += `    </ShowGuesser>\\n`;\n  code += `);\\n`;\n  code += `\\n`;\n  code += `And don't forget update your <ResourceGuesser> component:\\n`;\n  code += `<ResourceGuesser name={\"${schema.name}\"} show={${schema.title}Show} />`;\n  console.info(code);\n};\n\nconst IntrospectedShowGuesser = _ref => {\n  let {\n    fields,\n    readableFields,\n    writableFields,\n    schema,\n    schemaAnalyzer,\n    children,\n    ...props\n  } = _ref;\n  let fieldChildren = children;\n\n  if (!fieldChildren) {\n    fieldChildren = readableFields.map(field => /*#__PURE__*/_react.default.createElement(_FieldGuesser.default, {\n      key: field.name,\n      source: field.name,\n      addLabel: true\n    }));\n    displayOverrideCode(schema, readableFields);\n  }\n\n  return /*#__PURE__*/_react.default.createElement(_reactAdmin.Show, props, /*#__PURE__*/_react.default.createElement(_reactAdmin.SimpleShowLayout, null, fieldChildren));\n};\n\nexports.IntrospectedShowGuesser = IntrospectedShowGuesser;\n\nconst ShowGuesser = props => /*#__PURE__*/_react.default.createElement(_Introspecter.default, _extends({\n  component: IntrospectedShowGuesser\n}, props));\n\nShowGuesser.propTypes = {\n  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),\n  resource: _propTypes.default.string.isRequired\n};\nvar _default = ShowGuesser;\nexports.default = _default;","map":{"version":3,"sources":["C:/newproject/bookshop-api/myadmin/node_modules/@api-platform/admin/lib/ShowGuesser.js"],"names":["Object","defineProperty","exports","value","default","IntrospectedShowGuesser","_react","_interopRequireDefault","require","_propTypes","_reactAdmin","_FieldGuesser","_Introspecter","obj","__esModule","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","displayOverrideCode","schema","fields","process","env","NODE_ENV","code","title","forEach","field","name","console","info","readableFields","writableFields","schemaAnalyzer","children","props","fieldChildren","map","createElement","addLabel","Show","SimpleShowLayout","ShowGuesser","component","propTypes","oneOfType","node","func","resource","string","isRequired","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.IntrospectedShowGuesser = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactAdmin = require(\"react-admin\");\n\nvar _FieldGuesser = _interopRequireDefault(require(\"./FieldGuesser\"));\n\nvar _Introspecter = _interopRequireDefault(require(\"./Introspecter\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nconst displayOverrideCode = (schema, fields) => {\n  if (process.env.NODE_ENV === 'production') return;\n  let code = 'If you want to override at least one field, paste this content in the <ShowGuesser> component of your resource:\\n\\n';\n  code += `const ${schema.title}Show = props => (\\n`;\n  code += `    <ShowGuesser {...props}>\\n`;\n  fields.forEach(field => {\n    code += `        <FieldGuesser source={\"${field.name}\"} addLabel={true} />\\n`;\n  });\n  code += `    </ShowGuesser>\\n`;\n  code += `);\\n`;\n  code += `\\n`;\n  code += `And don't forget update your <ResourceGuesser> component:\\n`;\n  code += `<ResourceGuesser name={\"${schema.name}\"} show={${schema.title}Show} />`;\n  console.info(code);\n};\n\nconst IntrospectedShowGuesser = ({\n  fields,\n  readableFields,\n  writableFields,\n  schema,\n  schemaAnalyzer,\n  children,\n  ...props\n}) => {\n  let fieldChildren = children;\n\n  if (!fieldChildren) {\n    fieldChildren = readableFields.map(field => /*#__PURE__*/_react.default.createElement(_FieldGuesser.default, {\n      key: field.name,\n      source: field.name,\n      addLabel: true\n    }));\n    displayOverrideCode(schema, readableFields);\n  }\n\n  return /*#__PURE__*/_react.default.createElement(_reactAdmin.Show, props, /*#__PURE__*/_react.default.createElement(_reactAdmin.SimpleShowLayout, null, fieldChildren));\n};\n\nexports.IntrospectedShowGuesser = IntrospectedShowGuesser;\n\nconst ShowGuesser = props => /*#__PURE__*/_react.default.createElement(_Introspecter.default, _extends({\n  component: IntrospectedShowGuesser\n}, props));\n\nShowGuesser.propTypes = {\n  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),\n  resource: _propTypes.default.string.isRequired\n};\nvar _default = ShowGuesser;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}