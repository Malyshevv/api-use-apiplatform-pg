{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar jsonLdMimeType = \"application/ld+json\";\n/**\n * Sends a JSON-LD request to the API.\n */\n\nfunction fetchJsonLd(url, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return tslib_1.__awaiter(this, void 0, void 0, function () {\n    var response, headers, status, contentType;\n    return tslib_1.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fetch(url, setHeaders(options))];\n\n        case 1:\n          response = _a.sent();\n          headers = response.headers, status = response.status;\n          contentType = headers.get(\"Content-Type\");\n\n          if (204 === status) {\n            return [2\n            /*return*/\n            , Promise.resolve({\n              response: response\n            })];\n          }\n\n          if (500 <= status || !contentType || !contentType.includes(jsonLdMimeType)) {\n            return [2\n            /*return*/\n            , Promise.reject({\n              response: response\n            })];\n          }\n\n          return [2\n          /*return*/\n          , response.json().then(function (body) {\n            return {\n              response: response,\n              body: body,\n              document: body\n            };\n          })];\n      }\n    });\n  });\n}\n\nexports.default = fetchJsonLd;\n\nfunction setHeaders(options) {\n  if (!options.headers) {\n    return tslib_1.__assign(tslib_1.__assign({}, options), {\n      headers: {}\n    });\n  }\n\n  var headers = typeof options.headers === \"function\" ? options.headers() : options.headers;\n  headers = new Headers(headers);\n\n  if (null === headers.get(\"Accept\")) {\n    headers.set(\"Accept\", jsonLdMimeType);\n  }\n\n  var result = tslib_1.__assign(tslib_1.__assign({}, options), {\n    headers: headers\n  });\n\n  if (\"undefined\" !== result.body && !(typeof FormData !== \"undefined\" && result.body instanceof FormData) && null === result.headers.get(\"Content-Type\")) {\n    result.headers.set(\"Content-Type\", jsonLdMimeType);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../src/hydra/fetchJsonLd.ts"],"names":[],"mappings":";;;;;;;;AAGA,IAAM,cAAc,GAAG,qBAAvB;AAEA;;AAEG;;AACH,SAA8B,WAA9B,CACE,GADF,EAEE,OAFF,EAEmC;AAAjC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAiC;;;;;;;AAMhB,iBAAA,CAAA;AAAA;AAAA,YAAM,KAAK,CAAC,GAAD,EAAM,UAAU,CAAC,OAAD,CAAhB,CAAX,CAAA;;;AAAX,UAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACE,UAAA,OAAO,GAAa,QAAQ,CAArB,OAAP,EAAS,MAAM,GAAK,QAAQ,CAAb,MAAf;AACF,UAAA,WAAW,GAAG,OAAO,CAAC,GAAR,CAAY,cAAZ,CAAd;;AAEN,cAAI,QAAQ,MAAZ,EAAoB;AAClB,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,OAAR,CAAgB;AAAE,cAAA,QAAQ,EAAA;AAAV,aAAhB,CAAP,CAAA;AACD;;AACD,cAAI,OAAO,MAAP,IAAiB,CAAC,WAAlB,IAAiC,CAAC,WAAW,CAAC,QAAZ,CAAqB,cAArB,CAAtC,EAA4E;AAC1E,mBAAA,CAAA;AAAA;AAAA,cAAO,OAAO,CAAC,MAAR,CAAe;AAAE,cAAA,QAAQ,EAAA;AAAV,aAAf,CAAP,CAAA;AACD;;AAED,iBAAA,CAAA;AAAA;AAAA,YAAO,QAAQ,CACZ,IADI,GAEJ,IAFI,CAEC,UAAC,IAAD,EAAe;AAAK,mBAAC;AAAE,cAAA,QAAQ,EAAA,QAAV;AAAY,cAAA,IAAI,EAAA,IAAhB;AAAkB,cAAA,QAAQ,EAA3B;AAAC,aAAD;AAAoC,WAFzD,CAAP,CAAA;;;;AAGD;;AAtBD,OAAA,CAAA,OAAA,GAAA,WAAA;;AAwBA,SAAS,UAAT,CAAoB,OAApB,EAAgD;AAC9C,MAAI,CAAC,OAAO,CAAC,OAAb,EAAsB;AACpB,WAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAY,OAAZ,CAAA,EAAmB;AAAE,MAAA,OAAO,EAAE;AAAX,KAAnB,CAAA;AACD;;AAED,MAAI,OAAO,GACT,OAAO,OAAO,CAAC,OAAf,KAA2B,UAA3B,GAAwC,OAAO,CAAC,OAAR,EAAxC,GAA4D,OAAO,CAAC,OADtE;AAGA,EAAA,OAAO,GAAG,IAAI,OAAJ,CAAY,OAAZ,CAAV;;AAEA,MAAI,SAAS,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAb,EAAoC;AAClC,IAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,cAAtB;AACD;;AAED,MAAM,MAAM,GAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,OAAR,CAAA,EAAe;AAAE,IAAA,OAAO,EAAA;AAAT,GAAf,CAAZ;;AAEA,MACE,gBAAgB,MAAM,CAAC,IAAvB,IACA,EAAE,OAAO,QAAP,KAAoB,WAApB,IAAmC,MAAM,CAAC,IAAP,YAAuB,QAA5D,CADA,IAEA,SAAS,MAAM,CAAC,OAAP,CAAe,GAAf,CAAmB,cAAnB,CAHX,EAIE;AACA,IAAA,MAAM,CAAC,OAAP,CAAe,GAAf,CAAmB,cAAnB,EAAmC,cAAnC;AACD;;AAED,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar jsonLdMimeType = \"application/ld+json\";\n/**\n * Sends a JSON-LD request to the API.\n */\nfunction fetchJsonLd(url, options) {\n    if (options === void 0) { options = {}; }\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var response, headers, status, contentType;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, fetch(url, setHeaders(options))];\n                case 1:\n                    response = _a.sent();\n                    headers = response.headers, status = response.status;\n                    contentType = headers.get(\"Content-Type\");\n                    if (204 === status) {\n                        return [2 /*return*/, Promise.resolve({ response: response })];\n                    }\n                    if (500 <= status || !contentType || !contentType.includes(jsonLdMimeType)) {\n                        return [2 /*return*/, Promise.reject({ response: response })];\n                    }\n                    return [2 /*return*/, response\n                            .json()\n                            .then(function (body) { return ({ response: response, body: body, document: body }); })];\n            }\n        });\n    });\n}\nexports.default = fetchJsonLd;\nfunction setHeaders(options) {\n    if (!options.headers) {\n        return tslib_1.__assign(tslib_1.__assign({}, options), { headers: {} });\n    }\n    var headers = typeof options.headers === \"function\" ? options.headers() : options.headers;\n    headers = new Headers(headers);\n    if (null === headers.get(\"Accept\")) {\n        headers.set(\"Accept\", jsonLdMimeType);\n    }\n    var result = tslib_1.__assign(tslib_1.__assign({}, options), { headers: headers });\n    if (\"undefined\" !== result.body &&\n        !(typeof FormData !== \"undefined\" && result.body instanceof FormData) &&\n        null === result.headers.get(\"Content-Type\")) {\n        result.headers.set(\"Content-Type\", jsonLdMimeType);\n    }\n    return result;\n}\n//# sourceMappingURL=fetchJsonLd.js.map"]},"metadata":{},"sourceType":"script"}